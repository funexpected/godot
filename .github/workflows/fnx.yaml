name: build
on: [push]

env:
  GODOT_BASE_BRANCH: 3.2
  SCONS_CACHE_MSVC_CONFIG: true
  SCONS_CACHE_LIMIT: 4096

jobs:
  build-osx-editor:
    runs-on: "macos-latest"
    steps:
      - name: Checkout Engine
        uses: actions/checkout@v2

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: editor-osx-cache
        uses: actions/cache@v2
        with:
          path: .scons_cache
          key: editor.osx-${{github.ref}}-${{github.sha}}
          restore-keys: |
            editor.osx-${{github.ref}}-${{github.sha}}
            editor.osx-${{github.ref}}
            editor.osx

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 platform=osx tool=yes target=release_debug verbose=yes
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: osx.editor
          path: bin/*
  
  build-osx-editor-headless:
    runs-on: "macos-latest"
    steps:
      - name: Checkout Engine
        uses: actions/checkout@v2

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: editor-osx-headless-cache
        uses: actions/cache@v2
        with:
          path: .scons_cache
          key: editor.osx.headless-${{github.ref}}-${{github.sha}}
          restore-keys: |
            editor.osx.headless-${{github.ref}}-${{github.sha}}
            editor.osx.headless-${{github.ref}}
            editor.osx.headless

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 platform=server tool=yes target=release_debug verbose=yes

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: osx.editor.headless
          path: bin/*

  build-ios-release:
    runs-on: "macos-latest"
    steps:
      - name: Checkout Engine
        uses: actions/checkout@v2

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: ios-release-cache
        uses: actions/cache@v2
        with:
          path: .scons_cache
          key: ios.release-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ios.release-${{github.ref}}-${{github.sha}}
            ios.release-${{github.ref}}
            ios.release

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          mkdir iphone
          scons p=iphone -j2 tools=no bits=64 target=release_debug arch=arm64 module_firebase_enabled=no module_websocket_enabled=no game_center=no debug_symbols=no separate_debug_symbols=yes
          find bin
          cp bin/* iphone/
          zip -X -r ios.release.zip iphone


      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ios.templates.release
          path: ios.release.zip

  archive:
    runs-on: ubuntu-latest
    needs: [build-osx-editor, build-osx-editor-headless, build-ios-release]
    steps:
      - run: mkdir -p fnx.godot
      - name: Download OSX Editor
        uses: actions/download-artifact@v2
        with:
          name: osx.editor
          path: fnx.godot
      - name: Download OSX Headless Editor
        uses: actions/download-artifact@v2
        with:
          name: osx.editor.headless
          path: fnx.godot
      - name: Download iOS Release Templates
        uses: actions/download-artifact@v2
        with:
          name: ios.templates.release
          path: fnx.godot
      - name: Show contents
        run: find fnx.godot
      - name: Prepare assets
        run: |
          zip -r fnx.godot.zip fnx.godot
      - name: Calculate tag
        id: vars
        run: echo "::set-output name=sha_short::$(echo "${{github.sha}}" | cut -c 1-8)"
      - run: Releasing fnx.${{ steps.vars.outputs.sha_short }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: fnx.${{ steps.vars.outputs.sha_short }}
          release_name: Release fnx.${{ steps.vars.outputs.sha_short }} (${{ github.ref }})
          draft: false
          prerelease: false
      - name: Upload Release
        id: upload-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./fnx.godot.zip
          asset_name: fnx.godot.zip
          asset_content_type: application/zip
      